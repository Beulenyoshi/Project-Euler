=begin

p2_evenFibonacci.rb

Thomas Johannesmeyer 2017

Project Euler

Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do
not exceed four million, find the sum of the even-valued terms.

=end


def fibRec(n)
  # Recursive Fibonacci implementation for reference and some tests
  if (n == 0)
    # n = 0 > 0
    return 0
  elsif ((n == 1) or (n == 2))
    # n = 1,2 > 1
    return 1
  else
    return fibRec(n-1) + fibRec(n-2)
  end
end

# Naive and frankly stupid solution:
=begin 
     n fibCount = 10
     n sum = 0
     n (0..fibCount).each do |n|
     n   puts fibRec(n).to_s
     n   currentFib = fibRec(n)
     n   sum += (currentFib % 2 == 0) ? currentFib : 0
     n end
     n
     n puts "Sum of all even Fibonnaci numbers is: #{sum}"
     n
=end


# Now once more (with feeling):

def sumOfEvenFibsUpTo(n)
  lastFib = 0
  fib     = 1
  sum     = 0

  (0...n).each do |x|
    tempFib = lastFib + fib
    lastFib = fib
    fib     = tempFib

    puts fib.to_s 
    if (tempFib % 2 == 0)
      sum += tempFib
    end
  end
  puts sum.to_s
end

puts sumOfEvenFibsUpTo(10).to_s
